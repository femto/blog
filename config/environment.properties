###############################################################################
#
# Note: 
#
#   1. This file contains properties for the framework. 
#   2. Optional properties are optional. 
#
#   Author: Chen Fei
###############################################################################

###############################################################################
#
#   Required Section
#
###############################################################################


###############################################################################
#
#   Default Section (Optional)
#
#   The following is a list of parameters that you can config:
#
#   model.class.prefix specifies prefix of package name of model classes. 
#   Example: model.class.prefix=com.blog.models
#   Default is models.
#   model.class.prefix=models
#
#   model.class.suffix specifies suffix of package name of model classes. 
#   Default is none.
#   model.class.suffix=
#
#   controller.class.prefix specifies prefix of package name of controller classes.
#   Example: controller.class.prefix=com.blog.controllers
#   Default is controllers. 
#   controller.class.prefix=controllers
#
#   controller.class.suffix specifies suffix of package name of controller classes.
#   Default is Controller.
#   controller.class.suffix=Controller
#
#   auto.crud indicates whether to use default the built-in CRUD controller 
#   class in the absense of a controller. Use true for quick prototyping or 
#   demo situation only.
#   auto.crud=false
#
#   action.extension specifies extension for an action url. By default, Scooter 
#   uses RestfulRequestProcessor which uses url extension as a format of 
#   response message. If you need to use pure action-based url, you should set
#   action.extension to a specific action word and also replace 
#   RestfulRequestProcessor by BaseRequestProcessor in web.xml.
#   Examples of pure action-based urls: 
#       an url with extention .do --> /blog/posts/edit.do 
#       an url with no extension  --> /blog/posts/list
#   The disadvantage of using action.extension is that you lose the benefit of 
#   routes and resources. But you gain the benefit of moving your deployment to 
#   many other servlet containers besides Jetty and Tomcat.
#   Default is none.
#   action.extension=
#
#   default.action.method indeciates default action method of a controller 
#   class to use when the action name is not detected: 
#   default.action.method=index
#
#   allow.default.action.method indicates if a default action name is used when 
#   an action method is not obtained by parsing a url.
#   allow.default.action.method=true
#
#   webpage.directory.name specifies directory name for web pages.
#   This must be either an empty string or a directory directly under the 
#   webapp directory.
#   webpage.directory.name=WEB-INF/views
#
#   allow.forward.to.controller.name.view.when.controller.not.exist specifies 
#   what to do when a request is not associated with a controller. 
#   When set to true, the request is forwarded to a view of the same name as 
#   the controller/action name when the controller doesn't exist. 
#   allow.forward.to.controller.name.view.when.controller.not.exist=true
#
#   allow.forward.to.action.name.view.when.action.not.exist specifies what to 
#   do when a request is not associated with an action. 
#   When set to true, the request is forwarded to a view of the same name as 
#   the action name when the controller doesn't have the action method. 
#   allow.forward.to.action.name.view.when.action.not.exist=true
#
#   view.extension specifies file extension for view files. 
#   Default is jsp.
#   view.extension=jsp
#
#   The root view is "index.jsp" which is a jsp file directly under 
#   the /WEB-INF/views directory. If you want the root view file to be under 
#   webapp directly, then set root.url=index.jsp
#   root.url=/WEB-INF/views/index.jsp
#
#   Running Environment (Optional)
#   Note: 
#       Three running environments are supported:
#       DEVELOPMENT (default), TEST, PRODUCTION
#
#   running.environment=DEVELOPMENT
#
#   password.scheme indicates the password scheme used to encrypt a password.
#   Examples: passwordScheme=md5
#   Default is none.
#   password.scheme=
#
#   benchmark indicates whether to measure benchmark time
#   benchmark=false
#
#   benchmark.in.header indicates whether to output benchmark time in response header
#   This is not recommended for Production environment as it will increase
#   cost of performance.
#   benchmark.in.header=true
#
#   I18N support:
#   Use ISO Language Code for locale.language and ISO Country Code for locale.country. 
#   See Java Doc of java.util.Locale for more details on language, country and variant.
#   If locale.language is not set, the language is Locale.getDefault().getLanguage().
#   If locale.country is not set, the country is Locale.getDefault().getCountry().
#   If locale.variant is not set, the variant is Locale.getDefault().getVariant().
#   locale.language=
#   locale.country=
#   locale.variant=
#
#   message.resources.file.base specifies base name for message resources files.
#   message.resources.file.base=messages
#
#   Error page uri
#   Note: Error page uri must be relative to current servlet context, with or 
#         without a leading slash.
#   app.error.page.uri=/WEB-INF/views/error.jsp
#
#   allow.displaying.error.details indicates whether to allow dislaying error 
#   details in error page. 
#   allow.displaying.error.details=true
#
#   allow.databrowser indicates whether to allow data browser.
#   allow.databrowser=true
#
#   Add more single/plural words if WordUtil is not enough in resolving plurals.
#   Use ':' to separate single and plural words and 
#   Use ',' to separate each single/plural pair. 
#   Example: additional.single.plural=box:boxes, thesis:theses
#   additional.single.plural=
#
################################################################################
controller.class.prefix=blog.controllers
model.class.prefix=blog.models

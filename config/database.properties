################################################################################
#
# Note: 
#
#   1. This file contains properties for database. 
#   2. The properties are applied for both ActiveRecord and SQL Data Express 
#      unless otherwise annoted.
#   3. Developers should update the database.connection properties with proper 
#      database configuration information.
#
#   Author: Chen Fei
################################################################################

################################################################################
#
#   Default Transaction Section (Optional)
#
#   Note: 
#       1. If there is no property specified in this section, 
#          JDBC type will be used. 
#       2. Supported transaction types are: 
#               --JDBC (using Connection)
#               --JTA  (using UserTransaction)
#               --CMT  (using Container's transaction manager)
#
################################################################################
#default.transaction.type=JDBC

################################################################################
#
#   Default Database Connection Section (Optional)
#
#   Note: 
#       1. The connection name specified here are used by scooter 
#          to load database connection properties. For example, if the 
#          connection name is jpetstore, the corresponding connection 
#          properties can be found in database.connection.jpetstore. 
#       2. If there is no property specified in this section, the caller (or 
#          client code of scooter) must provide information at run time 
#          for scooter to establish a database connection through 
#          DatabaseConnectionContext object. 
#       3. If there is no corresponding property specified in the next
#          section, scooter may use data source defined in container's 
#          database-sources.xml file to find out connection properties. 
#
################################################################################
default.database.connection.name=blog_development

################################################################################
#
#   Global Table Naming Convention (Optional, ActiveRecord only)
#
#   Note: 
#       1. This property facilitates those database schemas that require a 
#          global naming convention for all tables. For example, in a crm
#          schema, all tables might have prefix "CRM_". Therefore, a USER table
#          is named as CRM_USER.
#       2. If there is no property specified for prefix or suffix, 
#          empty string will be used. 
#
################################################################################
#global.table.naming.prefix=
#global.table.naming.suffix=
#use.plural.table.name=true

################################################################################
#
#   Database Connection Definitions Section
#
#   Note:
#       1. Scooter supports two ways of configuring database connections: 
#            -connection definitions
#            -container-based data sources file 
#
#          The connection definitions approach allows you to run Scooter-powered 
#          application in either a web container or a non-web situation such as 
#          TEST and ORM alone mode. This gives you more flexibility.
#
#          The container-based approach uses container's data sources file. This 
#          is good for running Scooter-powered application in a web container.
#
#          You can configure connection pools in the first approach. If you use 
#          the second approach, connection pool capability should be provided by 
#          the associated web container. 
#
#       2. The following describes properties for each approach. If username and 
#          password are not defined in the property file here or in container's 
#          data sources file, they must be provided at run time.
#
#       3. The connection pool capability of the first approach is provided by 
#          c3p0, an open source very robust JDBC connection pool framework.
#
#          
#   Allowed Parameters and their values for "connection definitions" approach:
#       driver: required, eg. com.mysql.jdbc.Driver
#       url: required, eg. jdbc:mysql://localhost/jpetstore
#       before_connection: optional, {full class name}.{method name} (eg. com.jpetstore.util.ConnectionUtil.before_connection)
#       after_connection:  optional, {full class name}.{method name} (eg. com.jpetstore.util.ConnectionUtil.after_connection)
#       username: optional, if not provided, must be supplied at runtime
#       password: optional, if not provided, must be supplied at runtime
#       max_pool_size: optional, default 5, maximum number of connections a pool will maintain at any given time.
#                    Zero means c3p0-backed connection pool is not turned on. 
#                    In this case, connection is managed by DriverManager.
#       min_pool_size: optional, default  3, minimum number of connections a pool will maintain at any given time.
#       acquire_increment: optional, default 3, number connections at a time 
#                          framework will try to acquire when the pool is exhausted.
#       initial_pool_size: optional, default 3, number of connections a pool will try to 
#                          acquire upon startup. Should be between min_pool_size and max_pool_size.
#       max_idle_time: optional, default 0, seconds a connection can remain pooled but unused before being discarded. 
#                    Zero means idle connections never expire.
#       timeout: optional, maximum time in seconds that this data source will wait
#                while attempting to connect to a database.  A value of zero
#                specifies that the timeout is the default system timeout 
#                if there is one; otherwise, it specifies that there is no timeout.
#                When a <tt>DataSource</tt> object is created, the login timeout is
#                initially zero.
#       readonly: optional, true/false(default)
#       vendor: optional (MYSQL, ORACLE)
#       transaction_isolation_level: optional, default -1 (no specified level, use DB default setting)
#                                             0: TRANSACTION_NONE
#                                             1: TRANSACTION_READ_UNCOMMITTED
#                                             2: TRANSACTION_READ_COMMITTED
#                                             4: TRANSACTION_REPEATABLE_READ
#                                             8: TRANSACTION_SERIALIZABLE
#
#   Allowed Parameters and their values for "container data sources file" approach:
#       data_source_name: required, must be the same as one of the data source name
#                       in the container's data sources file
#       before_connection: optional, {full class name}.{method name} (eg. com.jpetstore.util.ConnectionUtil.before_connection)
#       after_connection:  optional, {full class name}.{method name} (eg. com.jpetstore.util.ConnectionUtil.after_connection)
#       username: optional, if not provided, must be supplied at runtime
#       password: optional, if not provided, must be supplied at runtime
#       timeout: optional, maximum time in seconds that this data source will wait
#                while attempting to connect to a database.  A value of zero
#                specifies that the timeout is the default system timeout 
#                if there is one; otherwise, it specifies that there is no timeout.
#                When a <tt>DataSource</tt> object is created, the login timeout is
#                initially zero.
#       readonly: optional, true/false(default)
#       vendor: optional (MYSQL, ORACLE)
#       transaction_isolation_level: optional, default -1 (no specified level, use DB default setting)
#                                             0: TRANSACTION_NONE
#                                             1: TRANSACTION_READ_UNCOMMITTED
#                                             2: TRANSACTION_READ_COMMITTED
#                                             4: TRANSACTION_REPEATABLE_READ
#                                             8: TRANSACTION_SERIALIZABLE
#
#   Examples:
#   
#   1. Configure a Pet Store database in MySQL:
#    database.connection.jpetstore=\
#        driver=com.mysql.jdbc.Driver,\
#        url=jdbc:mysql://localhost/jpetstore,\
#        username=root,\
#        password=
#   
#   2. Configure a Pet Store database in Oracle:
#    database.connection.jpetstore=\
#        driver=oracle.jdbc.driver.OracleDriver,\
#        url=jdbc:oracle:thin:@127.0.0.1:1521:jpetstore,\
#        username=scott,\
#        password=tiger
#
#   3. Configure a Petclinic database defined in Jetty's configuration file 
#      (jetty.xml or WEB-INF/jetty-env.xml or a context xml file):
#    database.connection.petclinic_development=\
#        data_source_name=jdbc/petclinic_development_DS
#
#      If you use the embedded Jetty server that comes with the Scooter framework, 
#      the data source name can be found in file tools/servers/jetty-embedded/contexts/{appName}.xml
#
#   4. Configure a Sales database defined in Oracle OC4J server's data-sources.xml file:
#    database.connection.Sales=\
#        data_source_name=SalesPoolDS
#
################################################################################
    database.connection.blog_development=\
        driver=com.mysql.jdbc.Driver,\
        url=jdbc:mysql://localhost/blog_development?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull,\
        username=root,\
        password=,\
        max_pool_size=10,\
        min_pool_size=1

    database.connection.blog_test=\
        driver=com.mysql.jdbc.Driver,\
        url=jdbc:mysql://localhost/blog_test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull,\
        username=root,\
        password=,\
        max_pool_size=10,\
        min_pool_size=1

    database.connection.blog_production=\
        driver=com.mysql.jdbc.Driver,\
        url=jdbc:mysql://localhost/blog_production?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull,\
        username=root,\
        password=,\
        max_pool_size=10,\
        min_pool_size=1

################################################################################
#
#   Reference Data
#
#   Note: 
#       1. Every reference data has a name: reference.data.THENAME 
#       2. key and value attributes are required.
#       3. The class attribute denotes a model class name for the reference data.
#          The data will be loaded by the class's findAll method.
#       4. The sql attribute denotes the sql query for loading the reference data.
#          The loaded data will be stored as RowData.
#       5. Either class or sql attribute must be specified. In case both are 
#          specified, the data will be loaded by the class's findBySQL method.
#       6. The period attribute specifies the interval in milliseconds for reloading 
#          the data. Its default value is 0 which means load once and never refresh. 
#
#reference.data.bannerdata=\
#    sql=select * from bannerdata,\
#    key=id,\
#    value=name,\
#    period=0

#reference.data.category=\
#    class=com.myjpetstore.model.Category,\
#    key=catid,\
#    value=name,\
#    period=10000

################################################################################
#
#   Auto-fill Data (ActiveRecord only)
#
#   Note: 
#       1. Data for column names related to the autoaudit timestamp fields key 
#          are automatically filled.
#       2. The value is set to current java.sql.Timestamp object.
#         
#
################################################################################
autoaudit.create.timestamp.fields=created_at, created_dt, created_on, entry_dt
autoaudit.update.timestamp.fields=updated_at, updated_dt, updated_on, update_dt

################################################################################
#
# Additional SQL Data Type/Name Mapping
#
#   Note: 
#       1. The default sql data type/name mappings are defined in 
#          com.scooterframework.orm.sqldataexpress.config.DatabaseConfig class. 
#       2. Developers can override or add more here. See below for examples.
#       3. All items are of the following format separated by comma. 
#
#   Format: 
#       {sql data type name}:{sql data type}:{java class name}
#
#   Examples:
#       additional_sql_data_type_mapping=VARCHAR:12:java.lang.String, DATE:91:java.sql.TimeStamp
#
################################################################################

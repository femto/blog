###############################################################################
# Note: 
#   1. This file contains properties for the framework. 
#   2. Optional properties are optional. 
#
#   Author: Chen Fei
###############################################################################

###############################################################################
#
#   Routes Section
#
#   The following is a list of parameters that you can configure for routes. 
#   You can configure four types of routes (named route, root route, 
#   regular route, and default route) and two types of resources (resources and 
#   singleton resource). The rest routes are derived from the resources.
#
#   auto.rest indicates whether to automatically generate restful routes 
#   when a resources is not defined in routes.properties. 
#   The default value is false. 'true' is not recommended in production environment.
#   auto.rest=false
#
#   Config a named route: no dynamic parameters are allowed in named route.
#   Examples of named route:
#
#    routes.name.login=\
#        url:/login;\
#        controller:home;\
#        action:login
#    
#    routes.name.logout=\
#        url:/logout;\
#        controller:home;\
#        action:destroy
#
#    routes.name.index=\
#        url:index;\
#        controller:blog;\
#        action:main
#    
#    routes.name.allposts=\
#        url:/allposts;\
#        controller:posts;\
#        action:index
#
#   Config a root route: You may either define a root route or link it to an existing named route.
#   Examples of root route:
#
#    routes.root=\
#        url:index;\
#        controller:blog;\
#        action:main
#    
#    routes.root:index
#
#   Config a regular route: Dynamic parameters are allowed in regular route.
#   Examples of root route:
#
#    routes.regular.showpost=\
#        url:blog/$id;\
#        controller:posts;\
#        action:show
#
#   Config a resources: You may either define a resources or list them all together.
#   Examples of resources: 
#
#    resources.name.posts=\
#        controller:posts; controller_class:com.blog.controller.admin.PostsController; \
#        singular:post; namespace:admin; path_prefix:/users/$user_id; path_alias:entries; \
#        action_alias:{add=>make, edit=>change}; only:[add | create | edit]; except:[index | show | edit]; \
#        member:{prepare=>[get | post], mypost=>get}; collection:{search=>[get | post], paged_list=>get}; \
#        add:{upload=>post}; requirements : { id => /\\d+/ }
#
#    resource.name.admin=\
#        controller:admin; controller_class:com.blog.controller.admin.AdminController; \
#        namespace:admin; path_prefix:/users; path_alias:supervisor
#    
#    resources.list=recipes, comments, tags, users, accounts
#
#    resources.name.blogs=\
#        controller:blogs; parents:[users | accounts]
#
#   Config a singleton resource: You may either define a resource or list them all together.
#   Examples of singleton resource: 
#    resource.list=comment, tag
#
#    resources.name.records=\
#        controller:records; controller_class:com.scooterframework.builtin.databrowser.RecordsController; \
#        path_prefix:/databases/$database_id/tables/$table_id
#
#   Config a default route: default routes are mandatory if there is no resources.
#   Default routes should be defined at the end of this file.
#   Examples of default routes: Only the following three types are allowed.
#
#    routes.default.0=\
#        url:$controller/$action; requirements: {controller => /\\D+/, action => /\\D+/}
#
#    routes.default.1=\
#        url:$controller/$action/$id; requirements: {controller => /\\D+/, action => /\\D+/}
#
#    routes.default.2=\
#        url:$controller/$action/$id.$format; requirements: {controller => /\\D+/, action => /\\D+/}
################################################################################

#-------------------------------------------------------------------------------
# The following properties are for the built-in features.
#-------------------------------------------------------------------------------
routes.name.routesinfo=\
    url:/routes; \
    controller:builtin/siteinfo; \
    controller_class:com.scooterframework.builtin.SiteInfoController; \
    action:routes

resources.name.databases=\
    controller:builtin/databrowser/databases; controller_class:com.scooterframework.builtin.databrowser.DatabasesController; \
    only:[index | show]

resources.name.tables=\
    controller:builtin/databrowser/tables; controller_class:com.scooterframework.builtin.databrowser.TablesController;\
    only:[index | show]; parents: strict databases

resources.name.records=\
    controller:builtin/databrowser/records; controller_class:com.scooterframework.builtin.databrowser.RecordsController; \
    parents: strict tables->databases

resources.name.views=\
    controller:builtin/databrowser/views; controller_class:com.scooterframework.builtin.databrowser.ViewsController;\
    only:[index | show]; parents: strict databases

resources.name.vrecords=\
    controller:builtin/databrowser/vrecords; controller_class:com.scooterframework.builtin.databrowser.VrecordsController; \
    only:index; parents: strict views->databases

#-------------------------------------------------------------------------------
#@resources.list@ Marker line for code generator. Do not remove this line and the next line.
resources.list=posts

resources.name.comments=\
    controller:comments; parents: strict posts
#-------------------------------------------------------------------------------
resource.name.entries=path_alias:feedbacks
#-------------------------------------------------------------------------------
# Put your own routes and resources below:
#-------------------------------------------------------------------------------





#-------------------------------------------------------------------------------
# Default routes should be defined at the end of this file.
#-------------------------------------------------------------------------------
    routes.default.0=\
        url:$controller/$action; requirements: {controller => /\\D+/, action => /\\D+/}

    routes.default.1=\
        url:$controller/$action/$id; requirements: {controller => /\\D+/, action => /\\D+/}

    routes.default.2=\
        url:$controller/$action/$id.$format; requirements: {controller => /\\D+/, action => /\\D+/}
